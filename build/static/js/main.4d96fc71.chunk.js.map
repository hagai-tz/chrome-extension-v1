{"version":3,"sources":["components/Nav.js","stores/ArticleRawData.js","components/ArticleTitle.js","components/ArticleContent.js","components/VocabularyBox.js","components/ArticleLink.js","components/ArticleAuthor.js","App.js","serviceWorker.js","index.js"],"names":["Nav","wordsFilter","difficultyLevel","console","log","id","vertical","defaultValue","onChange","this","className","Component","ProcessedData","observable","action","a","async","axios","get","data","rawData","ArticleTitle","inject","observer","props","ArticleContent","processedData","map","word","translatedWord","ArticleLink","ArticleAuthor","shape","size","icon","App","createWebsiteData","Boolean","window","location","hostname","match","stores","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kbA+BeA,G,wNAtBXC,YAAc,SAACC,GAEXC,QAAQC,IAAIF,I,wEAKZ,OACI,yBAAKG,GAAG,WACI,0BAAMA,GAAG,oBAHZ,OAOG,kBAAC,IAAD,CAAQC,UAAQ,EAACC,aAAc,GAAIC,SAAUC,KAAKR,YAAaS,UAAU,WACzE,0BAAMA,UAAU,QAAhB,QACA,0BAAMA,UAAU,QAAhB,a,GAjBNC,c,oFCELC,GAAb,yJAEKC,KAFL,wEAE0B,MAF1B,+CAGKC,KAHL,oFAGgC,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACPE,IAAMC,IAAN,2BADO,OACpBC,EADoB,OAExB,EAAKC,QAAUD,EAAKA,KACpBhB,QAAQC,IAAIe,GAHY,yCAHhC,GCWeE,EAddC,YAAQ,gB,GAERC,Y,mLAIO,OADApB,QAAQC,IAAIK,KAAKe,OAEb,kC,GAJeb,e,MCsBZc,G,OC5Bad,Y,ODG3BW,YAAO,gB,GAEPC,Y,mLAKO,OADApB,QAAQC,IAAIK,KAAKe,MAAME,cAAcN,QAAQ,IAEzC,yBAAKf,GAAG,mBAEHI,KAAKe,MAAME,cAAcN,QAAQO,KAAI,SAAAC,GAClC,OACI,0BAAMlB,UAAU,WACZ,0BAAMA,UAAU,QAAhB,IAAyBkB,EAAKA,KAA9B,KACA,0BAAMlB,UAAU,kBAAhB,IAAmCkB,EAAKC,yB,GAXvClB,e,OEQdmB,G,OAXdR,YAAO,gB,GAEPC,Y,mLAGO,OACI,wBAAIlB,GAAG,oBAAP,mE,GAHcM,e,gBCSXoB,G,wLAXP,OACA,yBAAK1B,GAAG,sBACJ,kBAAC,IAAD,CAAQ2B,MAAM,SAASC,KAAM,GAAIC,KAAK,OAAOxB,UAAU,uBACvD,yBAAKA,UAAU,uBAAf,oDACA,yBAAKA,UAAU,4BAAf,iB,GANgBC,cC4CbwB,EAlCdb,YAAQ,gB,GAERC,Y,8LAIOd,KAAKe,MAAME,cAAcU,sB,+BAY/B,OAFMjC,QAAQC,IAAIK,KAAKe,OAIrB,yBAAKnB,GAAG,kBACN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAtBYM,e,MCNE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAEMC,EAAS,CAAEhB,cAFG,IAAId,GAOxB+B,IAASC,OAAQ,kBAAC,IAAaF,EACX,kBAAC,EAAD,OACWG,SAASC,eAAe,SDgHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d96fc71.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Icon, Slider } from 'antd';\nimport \"antd/dist/antd.css\";\n\n\nimport './CSS/Nav.css'\n\nclass Nav extends Component {\n\n    wordsFilter = (difficultyLevel) => {\n        \n        console.log(difficultyLevel)\n\n    }\n    render() {\n        const logo = \"<p>\"\n        return (\n            <div id='nav-bar'>\n                        <span id='nav-log-top-left'>{logo}\n                        {/* <Icon type=\"line\" style={{ fontSize: '15px', alignItems: 'center' }} /> */}\n                        </span>\n                        {/* <Icon type=\"font-colors\" style={{ fontSize: '45px', padding:'5px' }} /> */}\n                        <Slider vertical defaultValue={40} onChange={this.wordsFilter} className='slider'/>\n                        <span className='hard'>Hard</span>\n                        <span className='easy'>Easy</span>\n                \n            </div>\n        );\n    }\n}\n\nexport default Nav;","import { observable, action, computed } from \"mobx\";\nimport axios from 'axios'\n\n// const jsdom = require('jsdom')\n// const { JSDOM } = jsdom;\n// const _ = require('lodash')\n// const read = require('moz-readability-node');\n\n\nexport class ProcessedData {\n\n    @observable rawData = []\n    @action createWebsiteData = async () => {\n        let data = await axios.get(`http://localhost:8000/`)\n        this.rawData = data.data\n        console.log(data)\n        \n        }\n    }\n\n\n\n    //       //RIPPING THE ARTICLE\n\n    //   //gets the HTML from the URL\n    //   // let webData = await request('https://www.haaretz.co.il/news/elections/.premium.highlight-1.8440077')\n    // //   let webData = await axios.get('https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-how-to-build-a-simple-chrome-extension-in-vanilla-javascript-e52b2994aeeb')\n    //   //turn the HTML into DOM document\n    //   const dom = window.document//new JSDOM(webData);\n    //   console.log(dom)\n    //   //use the readability library to parse the DOM document into a JSON free from all the clutter.\n    //   const article = new read.Readability(dom).parse()\n    //   let fullArticle = _.words(article.textContent)\n    //   console.log(article)\n","import React, { Component } from 'react';\nimport './CSS/ArticleTitle.css'\n\nimport { observer, action, inject } from 'mobx-react'\nimport ArticleRawData from '../stores/ArticleRawData'\n\n@inject( \"processedData\" )\n\n@observer\nclass ArticleTitle extends Component {\n    render() {\n        console.log(this.props)\n        return (\n            <div></div>\n            // <h1 id='article-title'>{this.props.processedData.rawData[this.props.processedData.rawData.length-1]}</h1>\n        );\n    }\n}\n\n\nexport default ArticleTitle;","import React, { Component } from 'react';\nimport './CSS/ArticleContent.css'\n\nimport { observer, action, inject } from 'mobx-react'\nimport ArticleRawData from '../stores/ArticleRawData'\n\n@inject(\"processedData\")\n\n@observer\nclass ArticleContent extends Component {\n\n    render() {\n        console.log(this.props.processedData.rawData[0])\n        return (\n            <div id='article-content'>\n\n                {this.props.processedData.rawData.map(word => {\n                    return (\n                        <span className='word-ul'>\n                            <span className=\"word\"> {word.word} </span>\n                            <span className='translatedWord'> {word.translatedWord}</span>\n                        </span>\n                    )\n                })\n\n            }\n            </div>\n        );\n    }\n}\n\nexport default ArticleContent;","import React, { Component } from 'react';\nimport './CSS/VocabularyBox.css'\n\nclass VocabularyBox extends Component {\n    render() {\n        return (\n            <div id='vocabulary-box'><h5>Vocabulary Box</h5>\n                \n            </div>\n        );\n    }\n}\n\nexport default VocabularyBox;","import React, { Component } from 'react';\nimport './CSS/ArticleLink.css'\n\nimport { observer, action, inject } from 'mobx-react'\nimport ArticleRawData from '../stores/ArticleRawData'\n\n@inject(\"processedData\")\n\n@observer\nclass ArticleLink extends Component {\n    render() {\n        return (\n            <h4 id='article-link-box'>https://www.ycombinator.com/ask-yc-best-friends-cofounders/</h4>\n        );\n    }\n}\n\nexport default ArticleLink;\n\n","import React, { Component } from 'react';\nimport { Icon, Slider, Avatar } from 'antd';\nimport \"antd/dist/antd.css\";\nimport './CSS/ArticleAuthor.css'\n\nclass ArticleAuthor extends Component {\n    render() {\n        return (\n        <div id='article-author-box'>\n            <Avatar shape=\"square\" size={30} icon=\"user\" className='article-author-pic' />\n            <div className='article-author-line'>Line skjns aslkalksasaks lakslk lk al slks las l</div>\n            <div className='article-author-read-time'>10-20min</div>\n        </div> \n                \n        );\n    }\n}\n\nexport default ArticleAuthor;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\n\n//Components\nimport Nav from './components/Nav';\nimport ArticleTitle from './components/ArticleTitle';\nimport VocabularyBox from './components/VocabularyBox';\nimport ArticleContent from './components/ArticleContent';\nimport ArticleLink from './components/ArticleLink'\nimport ArticleAuthor from './components/ArticleAuthor'\n\nimport { observer, action, inject } from 'mobx-react'\nimport ArticleRawData from './stores/ArticleRawData'\n\n@inject( \"processedData\" )\n\n@observer\nclass App extends Component {\n\n       componentDidMount (){\n        this.props.processedData.createWebsiteData()\n       \n        // let newData = await axios.get(`http://localhost:8000/`)\n        // this.props.processedData.addRawDataToAppStore(newData.data)\n        // console.log(this.props)\n           \n      }\n      \n    render ()\n      {\n        console.log(this.props)\n\n  return (\n   \n    <div id='user-interface'>\n      <Nav/>\n      <ArticleLink/>\n      <ArticleTitle />\n      <ArticleAuthor/>\n      <ArticleContent />\n      {/* <VocabularyBox/> */}\n\n    </div>\n    \n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'mobx-react'\nimport { ProcessedData } from '../src/stores/ArticleRawData'\n\n// let articleRawData = new ArticleRawData()\nlet processedData = new ProcessedData()\n\nconst stores = { processedData }\n// const stores = { articleRawData, processedData }\n\n\n\nReactDOM.render( <Provider {...stores} >\n                    <App/>\n                 </Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}